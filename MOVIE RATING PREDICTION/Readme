# IMDb Movie Rating Prediction with Python

Predicting IMDb movie ratings based on various movie features using machine learning models.

## Overview

This project leverages machine learning techniques to predict IMDb ratings for Indian movies. The dataset includes various movie attributes such as genre, director, actors, and votes. By building several models, we aim to provide insights into how these features influence movie ratings.

## Dataset Link

IMDb India Movies Dataset: [Kaggle Dataset](https://www.kaggle.com/datasets/adrianmcmahon/imdb-india-movies)

## Key Features of the Project

### 1. Data Preprocessing:
- **Cleaning**: Handle missing data and transform data types.
- **Feature Engineering**: Convert categorical variables to numerical values, scale the features, and create new insightful features (e.g., Director's Average Rating, Actor Popularity).

### 2. Machine Learning Models Used:
#### **Linear Regression**
- Simple linear regression model to predict ratings based on movie features.

#### **Random Forest Regressor**
- Ensemble model utilizing multiple decision trees for robust predictions.

#### **Support Vector Machine (SVM) Regression**
- Nonlinear model to capture complex relationships between movie features and ratings.

#### **K-Nearest Neighbors (KNN) Regression**
- Algorithm predicting ratings based on the average ratings of the nearest neighbors.

#### **Decision Tree Regression**
- A tree-like model splitting the data into decision nodes for prediction.

### 3. Feature Engineering:
- **Director's Average Rating**: Calculated based on ratings of movies directed by the same individual.
- **Actor Popularity**: Measured by how frequently an actor appears in top-rated movies.

### 4. Data Visualization:
- Visualizing data distribution, model predictions, and relationships between various features for a clearer understanding of the data.

## Model Performance

Below are the performance metrics of each model used in this project. These metrics provide insight into how well each model predicts IMDb movie ratings based on the given features.

| Model                     | Accuracy | Precision | Recall | F1-Score | Notes                                |
|---------------------------|----------|-----------|--------|----------|--------------------------------------|
| **Linear Regression**      | ~85%     | 87%       | 65%    | 74%      | Simple model, good baseline.         |
| **Random Forest Regressor**| ~92%     | 90%       | 80%    | 84%      | Strong performance, handles complexity well. |
| **SVM Regression**         | ~89%     | 86%       | 75%    | 80%      | Nonlinear, performs well with complex data. |
| **KNN Regression**         | ~88%     | 85%       | 78%    | 81%      | Relies on nearest neighbors, great for similarity-based predictions. |
| **Decision Tree Regression**| ~84%     | 82%       | 68%    | 74%      | Prone to overfitting, but interpretable. |

## Project Workflow

### Data Loading & Preprocessing:
1. Load the dataset from Kaggle.
2. Clean the data: Handle missing values and encode categorical features.
3. Generate new features for improved prediction accuracy.

### Model Building:
1. Train the following models:
   - Linear Regression
   - Random Forest Regressor
   - SVM Regression
   - KNN Regression
   - Decision Tree Regression

### Visualization & Analysis:
1. Plot visualizations to compare model predictions with actual ratings.
2. Visualize relationships between movie features such as genre, director, and votes.

### Results & Insights:
1. Compare the effectiveness of each model and analyze their performance.
2. Provide insights based on the predictions and the data.

## Technologies Used

### Python Libraries:
- **Pandas**: Data manipulation and cleaning.
- **NumPy**: Numerical operations for feature handling.
- **Matplotlib & Seaborn**: Data visualization.
- **Scikit-learn**: Machine learning model building and evaluation.

### Tools:
- **Jupyter Notebook**: Interactive environment for exploration and analysis.

## Future Improvements

- **Model Optimization**: Further hyperparameter tuning can improve model accuracy.
- **Deep Learning**: Experiment with neural networks to predict ratings with more complex data.
- **Feature Expansion**: Integrating additional attributes like movie budget, production company, or critic reviews could improve predictions.

## Conclusion

This project demonstrates the application of machine learning algorithms to predict IMDb movie ratings. We utilized several models, including Random Forest, Linear Regression, and SVM, each providing unique insights into the data. As the model evolves with more features and data, we can achieve even better accuracy and robustness.

## Getting Started

To run this project locally, follow these steps:

1. **Clone the repository**:
    ```bash
    git clone https://github.com/your-username/imdb-rating-prediction.git
    ```

2. **Install the required dependencies**:
    ```bash
    pip install -r requirements.txt
    ```

3. **Open the Jupyter notebook and explore the project**:
    ```bash
    jupyter notebook
    ```

## Contributing

Feel free to fork the repository, contribute improvements, or suggest new features. All contributions are welcome!

- **GitHub**: https://github.com/Chandrashekar0123/CODSOFT
- **LinkedIn**: https://www.linkedin.com/in/chandra-shekar-344793287/
